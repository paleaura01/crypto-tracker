-- 1. First, insert into auth_users
INSERT INTO auth_users (id, email, created_at, last_sign_in_at) 
VALUES (
  'eb0e5944-30a6-4b37-a12e-e3f99dc5db14',
  'crypto_tracker@yahoo.com',
  NOW(),
  NOW()
);

-- 2. Then insert into admin_users
INSERT INTO admin_users (id, user_id, created_at)
VALUES (
  uuid_generate_v4(), 
  'eb0e5944-30a6-4b37-a12e-e3f99dc5db14',
  NOW()
);

-- 3. Finally insert into user_payments
INSERT INTO user_payments (
  id,
  user_id,
  amount,
  payment_address,
  plan,
  transaction_signature,
  status,
  created_at
)
VALUES (
  uuid_generate_v4(),
  'eb0e5944-30a6-4b37-a12e-e3f99dc5db14',
  50,
  '9XAM8pJMk4fFMkuuQw5Jt15YyhtLoDBp93NTg5T4hhU2',
  'lifetime',
  'admin_account_creation',
  'active',
  NOW()
);


-- Allow authenticated users to read admin_users table
CREATE POLICY "Allow users to check admin status" ON public.admin_users
FOR SELECT TO authenticated
USING (auth.uid() = user_id);


-- Check everything in a public database
SELECT json_build_object(
  'tables', (
    SELECT json_agg(t) 
    FROM (
      SELECT table_name, table_type
      FROM information_schema.tables
      WHERE table_schema = 'public'
    ) t
  ),
  'columns', (
    SELECT json_agg(t) 
    FROM (
      SELECT table_name, column_name, data_type, character_maximum_length, numeric_precision, numeric_scale
      FROM information_schema.columns
      WHERE table_schema = 'public'
      ORDER BY table_name, ordinal_position
    ) t
  ),
  'foreign_keys', (
    SELECT json_agg(t) 
    FROM (
      SELECT 
        tc.constraint_name, 
        kcu.table_name, 
        kcu.column_name, 
        ccu.table_name AS referenced_table, 
        ccu.column_name AS referenced_column 
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu 
        ON tc.constraint_name = kcu.constraint_name
      JOIN information_schema.constraint_column_usage AS ccu 
        ON ccu.constraint_name = tc.constraint_name
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND tc.table_schema = 'public'
      ORDER BY kcu.table_name, kcu.column_name
    ) t
  ),
  'constraints', (
    SELECT json_agg(t) 
    FROM (
      SELECT 
        conname AS constraint_name, 
        conrelid::regclass AS table_name, 
        pg_get_constraintdef(oid) AS definition
      FROM pg_constraint
      WHERE connamespace = 'public'::regnamespace
        AND contype IN ('p', 'u')
      ORDER BY conname
    ) t
  ),
  'policies', (
    SELECT json_agg(t)
    FROM (
      SELECT *
      FROM pg_policies
      WHERE schemaname = 'public'
    ) t
  ),
  'users', (
    SELECT json_agg(t)
    FROM (
      SELECT usename, usesuper, usecreatedb, useconfig
      FROM pg_user
    ) t
  ),
  'active_sessions', (
    SELECT json_agg(t)
    FROM (
      SELECT 
        pid, 
        usename, 
        application_name, 
        client_addr, 
        state, 
        query
      FROM pg_stat_activity
      WHERE state = 'active'
    ) t
  ),
  'table_permissions', (
    SELECT json_agg(t)
    FROM (
      SELECT 
        grantee, 
        table_name, 
        privilege_type
      FROM information_schema.role_table_grants
      WHERE table_schema = 'public'
      ORDER BY grantee, table_name
    ) t
  )
) AS all_results;

-- Create a new administrator account and redo tables


-- First, enable extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";


-- Add NOT NULL constraints to all tables
ALTER TABLE auth_users 
ALTER COLUMN id SET NOT NULL,
ALTER COLUMN email SET NOT NULL,
ALTER COLUMN created_at SET NOT NULL,
ALTER COLUMN last_sign_in_at SET NOT NULL;

ALTER TABLE admin_users 
ALTER COLUMN id SET NOT NULL,
ALTER COLUMN user_id SET NOT NULL,
ALTER COLUMN created_at SET NOT NULL;


-- Make all user_payments fields NOT NULL since payment is required for account creation
ALTER TABLE user_payments 
ALTER COLUMN id SET NOT NULL,
ALTER COLUMN user_id SET NOT NULL,
ALTER COLUMN amount SET NOT NULL,
ALTER COLUMN payment_address SET NOT NULL,
ALTER COLUMN plan SET NOT NULL,
ALTER COLUMN transaction_signature SET NOT NULL,
ALTER COLUMN status SET NOT NULL,
ALTER COLUMN created_at SET NOT NULL;


-- Make relevant profile fields NOT NULL
ALTER TABLE profiles 
ALTER COLUMN id SET NOT NULL,
ALTER COLUMN username SET NOT NULL,
ALTER COLUMN updated_at SET NOT NULL;


-- Create admin user with required payment info
WITH new_auth_user AS (
    INSERT INTO auth_users (id, email, created_at, last_sign_in_at)
    VALUES (uuid_generate_v4(), 'crypto_tracker@yahoo.com', NOW(), NOW())
    RETURNING id
), admin_user AS (
    INSERT INTO admin_users (id, user_id, created_at)
    SELECT uuid_generate_v4(), id, NOW()
    FROM new_auth_user
    RETURNING user_id
)
INSERT INTO user_payments (
    id,
    user_id,
    amount, 
    payment_address,
    plan,
    transaction_signature,
    status,
    created_at
)
SELECT 
    uuid_generate_v4(),
    user_id,
    50,
    '9XAM8pJMk4fFMkuuQw5Jt15YyhtLoDBp93NTg5T4hhU2',
    'lifetime',
    'admin_account_creation',
    'active',
    NOW()
FROM admin_user;